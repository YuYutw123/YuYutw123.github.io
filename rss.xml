<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>YuYutw123&apos;s blog</title><description>Blog</description><link>https://yuyutw123.github.io/</link><language>zh_TW</language><item><title>Debug 日記</title><link>https://yuyutw123.github.io/posts/debug/</link><guid isPermaLink="true">https://yuyutw123.github.io/posts/debug/</guid><description>抓蟲蟲</description><pubDate>Thu, 08 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Node.js&lt;/h1&gt;
&lt;h2&gt;port access denied&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;error when starting dev server:
Error: listen EACCES: permission denied ::1:1111
    at Server.setupListenHandle [as _listen2] (node:net:1885:21)
    at listenInCluster (node:net:1964:12)
    at GetAddrInfoReqWrap.callback (node:net:2170:7)
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:132:8)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;解法一: 改port&lt;/h3&gt;
&lt;h3&gt;解法二: 重開 winnat&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;net stop winnat
net start winnat
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_31909977/article/details/130719456&quot;&gt;Error: listen EACCES: permission denied - CSDN&lt;/a&gt;&lt;/p&gt;
</content:encoded></item><item><title>Arch Linux TLP 省電</title><link>https://yuyutw123.github.io/posts/tlp/</link><guid isPermaLink="true">https://yuyutw123.github.io/posts/tlp/</guid><description>我需要電源</description><pubDate>Sun, 16 Mar 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;安裝&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S tlp

sudo systemctl enable tlp.service
sudo tlp start
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Config&lt;/h1&gt;
&lt;p&gt;預設就有不錯的省電功能，這邊可以自己調整更多設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/tlp.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/title/TLP&quot;&gt;Arch Linux Wiki - TLP&lt;/a&gt;&lt;/p&gt;
</content:encoded></item><item><title>Lethal Company 自定義Model模組 教學</title><link>https://yuyutw123.github.io/posts/lethalcompanymod/lethalcompanymod/</link><guid isPermaLink="true">https://yuyutw123.github.io/posts/lethalcompanymod/lethalcompanymod/</guid><description>一緒に迷子になろう</description><pubDate>Wed, 29 Jan 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;image.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://thunderstore.io/c/lethal-company/p/YuYutw123/MyGO_Together/&quot;&gt;MyGO Model Mod&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近推朋友玩了Lethal Company，所以又開始玩Lethal Company，然後裝了一堆自定義Model模組（像是Hololive, Valorant），結果居然沒有MyGO模型的模組，所以我決定弄一個來玩 :)&lt;/p&gt;
&lt;p&gt;然後發現我根本不會Unity和C#，ㄏㄏ&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;這篇文章會偏向我製作的過程紀錄&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;事前準備&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;3D Model&lt;/li&gt;
&lt;li&gt;Unity 2022.3.9f1(建議版本)&lt;/li&gt;
&lt;li&gt;Visual Studio 2022&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Unity 模型處理&lt;/h1&gt;
&lt;h2&gt;PMX 轉 FBX&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.deviantart.com/bunglescrungle/art/BanG-Dream-MyGO-FBX-and-PMX-DL-1036304336&quot;&gt;MyGO模型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因為我找到的MyGO模型只有PMX檔是全身，FBX檔的頭和身體是兩個檔案，我不會Blender不會合檔案，所以要把PMX轉成FBX&lt;/p&gt;
&lt;h3&gt;使用 MMD4Mecanim 轉檔&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stereoarts.jp/MMD4Mecanim_Beta_20200105.zip&quot;&gt;載點&lt;/a&gt;
&lt;img src=&quot;image-1.png&quot; alt=&quot;alt text&quot; /&gt;
&lt;img src=&quot;image-2.png&quot; alt=&quot;alt text&quot; /&gt;
&lt;img src=&quot;image-3.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跑完之後點擊你的Model資料夾中的MMD4檔，同意&lt;/strong&gt;
&lt;img src=&quot;image-4.png&quot; alt=&quot;alt text&quot; /&gt;
&lt;img src=&quot;image-5.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然後就會生成FBX檔了&lt;/strong&gt;
&lt;img src=&quot;image-6.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;設定模型&lt;/h2&gt;
&lt;h3&gt;基本設定&lt;/h3&gt;
&lt;p&gt;點擊你的FBX檔，右邊會跳出 Inspector&amp;lt;br&amp;gt;
設定 &lt;strong&gt;Humanoid&lt;/strong&gt;、&lt;strong&gt;Create From This Model&lt;/strong&gt;&amp;lt;br&amp;gt;
點 &lt;strong&gt;Apply&lt;/strong&gt;
&lt;img src=&quot;image-8.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;p&gt;跑完後，點擊Configure，檢查你的骨架有沒有正確&amp;lt;br&amp;gt;
然後姿勢要呈&lt;strong&gt;T字形&lt;/strong&gt; &amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;弄好就按 &lt;strong&gt;Apply&lt;/strong&gt;
&lt;img src=&quot;image-9.png&quot; alt=&quot;alt text&quot; /&gt;
像這邊 Chest 骨架沒有對應到
&lt;img src=&quot;image-10.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Model Replacement SDK 設定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安裝 Model Replacement SDK
&lt;ul&gt;
&lt;li&gt;Window -&amp;gt; Package Manager
&lt;img src=&quot;image-12.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Add package from git URL
&lt;ul&gt;
&lt;li&gt;貼上這個 &lt;a href=&quot;https://github.com/BunyaPineTree/LethalCompany_ModelReplacementSDK.git#upm&quot;&gt;連結&lt;/a&gt;，點 &lt;strong&gt;Add&lt;/strong&gt;
&lt;img src=&quot;image-13.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;套用到你的模型
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;設面步驟設定完後，把你的 Model 丟進去場景&amp;lt;br&amp;gt;
選取你的 Model，然後在 ModelReplacementSDK 中選擇 &lt;strong&gt;Setup Model&lt;/strong&gt;&amp;lt;br&amp;gt;
弄完就會生出兩個物件
&lt;img src=&quot;image-11.png&quot; alt=&quot;alt text&quot; /&gt;
&lt;img src=&quot;image-14.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把你的模型放到正確位置，那個圓形是基準面
&lt;img src=&quot;image-16.png&quot; alt=&quot;alt text&quot; /&gt;
&lt;img src=&quot;image-17.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然後把每個骨頭加上 &lt;strong&gt;Rotation Offset&lt;/strong&gt;
&lt;img src=&quot;image-18.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;設定 Project&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 Assets 空白處點右鍵，選 Create -&amp;gt; ModelReplacemectSDK -&amp;gt; Create Project
&lt;img src=&quot;image-19.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;li&gt;接下來把所有你要用的 Model 都綁到 Project
&lt;ul&gt;
&lt;li&gt;在 Model 的 Inspector 中&amp;lt;br&amp;gt;
Model Replacement Properties -&amp;gt; Project Properties -&amp;gt; Project&amp;lt;br&amp;gt;
選擇你剛剛創建的 Project
&lt;img src=&quot;image-21.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;綁完後到 Project 物件中，點擊 &lt;strong&gt;Build Project&lt;/strong&gt;
&lt;img src=&quot;image-20.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;檔案生成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;上面步驟都完成後就會生成模組所需要的 Model 資源了
&lt;img src=&quot;image-22.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;寫模組時間&lt;/h1&gt;
&lt;h2&gt;Visual Studio 專案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;創建專案，選 &lt;strong&gt;Class Library (.NET Framework)&lt;/strong&gt;&amp;lt;br&amp;gt;
&lt;img src=&quot;image-23.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;li&gt;添加專案需要的 Reference&amp;lt;br&amp;gt;
對專案名稱點右鍵，Add -&amp;gt; Reference...&amp;lt;br&amp;gt;
詳細添加操作請參考&lt;a href=&quot;https://youtu.be/4Q7Zp5K2ywI?si=ABXuQr-U05u5-irQ&amp;amp;t=378&quot;&gt;這個影片&lt;/a&gt;&amp;lt;br&amp;gt;
&lt;strong&gt;以下是我用到的Reference&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BepInEx/BepInEx/releases/tag/v5.4.23.2&quot;&gt;BepInEx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thunderstore.io/c/lethal-company/p/x753/More_Suits/source/&quot;&gt;More Suits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BunyaPineTree/LethalCompany_ModelReplacementAPI/releases/tag/Release_v2.4.5&quot;&gt;ModelReplacementAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;剩下的應該可以在&lt;code&gt;C:\Steam\steamapps\common\Lethal Company\Lethal Company_Data\Managed&lt;/code&gt;找到
&lt;img src=&quot;image-29.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;專案結構長這樣，詳細程式碼可以到我的 &lt;a href=&quot;https://github.com/YuYutw123/MyGO-Together&quot;&gt;Github Repo&lt;/a&gt; 看，照樣造句改就好了&amp;lt;br&amp;gt;
ModelReplacementAPI.dll 則在&lt;a href=&quot;https://github.com/BunyaPineTree/LethalCompany_ModelReplacementAPI/releases/tag/Release_v2.4.5&quot;&gt;這邊&lt;/a&gt;下載
&lt;img src=&quot;image-27.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;導出 dll 檔&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;寫完 code 後，先點選你的 bundle 檔案
在下面 Advanced 的 Build Action 中選擇 &lt;strong&gt;Embedded Resource&lt;/strong&gt;&amp;lt;br&amp;gt;
這樣你的模組檔案才會嵌入到 dll 檔裡面
&lt;img src=&quot;image-32.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;li&gt;設定完後，點 &lt;strong&gt;Build&lt;/strong&gt;&amp;lt;br&amp;gt;
然後到指定的地方找到你的 dll 檔
&lt;img src=&quot;image-31.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;設定 Thunderstore Mod package&lt;/h1&gt;
&lt;p&gt;結構如下，可&lt;a href=&quot;https://github.com/YuYutw123/MyGO-Together/tree/master/Builds&quot;&gt;參考&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BepInEx
└── plugins
    └── moresuits
        ├── advanced
        │   ├── Model_1.json
        │   └──Model_2.json
        ├── !less-suits.txt
        ├── Model_1.png
        ├── Model_2.png
        └── LCMygoModel.dll
├── icon.png
├── manifest.json
├── manifest.zip
└── README.md

&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bushiroad.com/&quot;&gt;Bushiroad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thunderstore.io/c/lethal-company/p/Tacocat12/Hololive_Company/&quot;&gt;Hololive Company&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/x753/Lethal-Company-More-Suits&quot;&gt;x753 / Lethal-Company-More-Suits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Mq4y187pT/?vd_source=f5639cb686b57c8db469894627c7dae5&quot;&gt;如何在Unity中导入pmx格式的MMD模型_哔哩哔哩_bilibili&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BunyaPineTree/LethalCompany_ModelReplacementAPI&quot;&gt;BunyaPineTree / LethalCompany_ModelReplacementAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.deviantart.com/bunglescrungle/art/BanG-Dream-MyGO-FBX-and-PMX-DL-1036304336&quot;&gt;BanG Dream MyGO!!! FBX and PMX DL By BungleScrungle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=sveHcIAG1mA&amp;amp;ab_channel=DoughnutSamurai&quot;&gt;How to Import a Model into Lethal Company By DoughnutSamurai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4Q7Zp5K2ywI&amp;amp;t=378s&amp;amp;ab_channel=MrMiinxx&quot;&gt;Lethal Company - How to write your own mod from scratch! By MrMiinxx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Astro + Github Pages + giscus</title><link>https://yuyutw123.github.io/posts/giscus/giscus/</link><guid isPermaLink="true">https://yuyutw123.github.io/posts/giscus/giscus/</guid><description>幫你的 Astro Blog 加上留言功能。</description><pubDate>Thu, 28 Nov 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;我很喜歡&lt;a href=&quot;https://github.com/saicaca/fuwari&quot;&gt;現在這個 Blog 模板&lt;/a&gt;，但目前作者還沒有做出留言功能，所以我就用 giscus 幫這個 Blog 嵌入留言功能。&lt;/p&gt;
&lt;h1&gt;前置作業&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;先到 &lt;a href=&quot;https://giscus.app/zh-TW&quot;&gt;giscus 官網&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;根據官方設定步驟操作
&lt;ul&gt;
&lt;li&gt;首先選擇語言
&lt;img src=&quot;image.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;li&gt;輸入你的 repo
&lt;img src=&quot;image-1.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;li&gt;選擇 Discussion 要用的標題&amp;lt;br&amp;gt;
因為 giscus 是利用 Github repo 中的 Discussion 功能去保存留言，每一篇 post 會開一個 Discussion，所以這邊建議用 title 也就是你 post 頁面的標題當成 Discussion的標題&amp;lt;br&amp;gt;
&lt;s&gt;(其實我不確定你們的 title 是不是 post 的標題，反正我的是:poop:)&lt;/s&gt;
&lt;img src=&quot;image-2.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;li&gt;剩下的依個人所好做選擇
&lt;img src=&quot;image-3.png&quot; alt=&quot;alt text&quot; /&gt;
&lt;img src=&quot;image-4.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;將 giscus 嵌入網頁&lt;/h1&gt;
&lt;p&gt;當你將上述步驟完成後，往下滑會看到&lt;code&gt;啟用 giscus&lt;/code&gt;下面有段 code &amp;lt;br&amp;gt;
基本上把他嵌入到你的網頁中就可以顯示 comment 區塊了 &amp;lt;br&amp;gt; &amp;lt;br&amp;gt;
&lt;strong&gt;但是！！&lt;/strong&gt; &amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;你會發現通常 Blog 都有分亮色和暗色模式，但是giscus正常的嵌入只能選一個 theme &amp;lt;br&amp;gt;
所以我們要設變數讓網頁在切換亮暗的時候，留言區也可以切換主題 &amp;lt;br&amp;gt;&lt;/p&gt;
&lt;h2&gt;用 React 寫一個留言的 Component 偵測主題變換&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;import Giscus from &apos;@giscus/react&apos;
import { useEffect, useState } from &apos;react&apos;

const getSystemTheme = () =&amp;gt;
  window.matchMedia(&apos;(prefers-color-scheme: dark)&apos;).matches ? &apos;dark&apos; : &apos;light&apos;

const getSavedTheme = () =&amp;gt; window.localStorage.getItem(&apos;theme&apos;) || &apos;dark&apos;

const Comments = () =&amp;gt; {
  const [mounted, setMounted] = useState(false)
  const [theme, setTheme] = useState(&apos;auto&apos;)

  // If theme == auto, then get systemtheme, to prevent giscus theme error
  useEffect(() =&amp;gt; {
    const handleStorageChange = event =&amp;gt; {
      if (event.key === &apos;theme&apos;) {
        const newTheme =
          event.newValue === &apos;auto&apos;
            ? getSystemTheme()
            : event.newValue || &apos;light&apos;
        setTheme(newTheme)
      }
    }

    window.addEventListener(&apos;storage&apos;, handleStorageChange)

    // Initial theme setup
    setTheme(getSavedTheme() === &apos;auto&apos; ? getSystemTheme() : getSavedTheme())

    return () =&amp;gt; window.removeEventListener(&apos;storage&apos;, handleStorageChange)
  }, [])

  useEffect(() =&amp;gt; {
    setMounted(true)
  }, [])

  return (
    &amp;lt;div id=&apos;inject-comments&apos; className=&apos;w-full&apos;&amp;gt;
      {mounted &amp;amp;&amp;amp; (
        &amp;lt;Giscus
          id=&apos;inject-comments&apos;
          repo=&apos;YuYutw123/YuYutw123.github.io&apos;
          repoId=&apos;R_kgDONUsJVg&apos;
          category=&apos;Announcements&apos;
          categoryId=&apos;DIC_kwDONUsJVs4CkrUq&apos;
          mapping=&apos;title&apos;
          reactionsEnabled=&apos;1&apos;
          emitMetadata=&apos;0&apos;
          inputPosition=&apos;top&apos;
          lang=&apos;en&apos;
          loading=&apos;lazy&apos;
          theme={theme === &apos;auto&apos; ? getSystemTheme() : theme}
        /&amp;gt;
      )}
    &amp;lt;/div&amp;gt;
  )
}

export default Comments

&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;導入 post 檔案&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;import Comments from &apos;../../components/customize/Comment&apos;

&amp;lt;Comments client:only=&quot;react&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;結語&lt;/h1&gt;
&lt;p&gt;之後有機會的話再看看有沒有更好的留言板系統，giscus要登入 Github 才能留言，還是有點小麻煩:p&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7359405432802607167&quot;&gt;使用 giscus 为你的 Astro 博客添加评论功能 (By liruifengv李瑞丰)&lt;/a&gt;&lt;/p&gt;
</content:encoded></item><item><title>資安導論筆記</title><link>https://yuyutw123.github.io/posts/informationsecurity/informationsecurity/</link><guid isPermaLink="true">https://yuyutw123.github.io/posts/informationsecurity/informationsecurity/</guid><description>早上11點要考試，凌晨12點開始複習:)</description><pubDate>Mon, 25 Nov 2024 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;授課老師：林韓禹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- &lt;a href=&quot;#ch05-the-business-of-security&quot;&gt;CH05 The Business of Security&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#business-continuity-planning-bcp&quot;&gt;Business Continuity Planning (BCP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#implementing-controls&quot;&gt;Implementing Controls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#maintaining-the-plan&quot;&gt;Maintaining the Plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#disaster-recovery-planning&quot;&gt;Disaster Recovery Planning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#selecting-the-team&quot;&gt;Selecting the Team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#building-the-plan&quot;&gt;Building the Plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#disaster-recover-facilities&quot;&gt;Disaster Recover Facilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#creative-disaster-recovery&quot;&gt;Creative Disaster Recovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#training&quot;&gt;Training&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#implementing-the-plan&quot;&gt;Implementing The Plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#maintaining-the-plan&quot;&gt;Maintaining the Plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#data-classification&quot;&gt;Data Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#security-clearances&quot;&gt;Security Clearances&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;CH04 General Security Principles&lt;/h1&gt;
&lt;p&gt;and Practices&lt;/p&gt;
&lt;h2&gt;Common Security Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Separation of Privileges Principle 分散權力原則
&lt;ul&gt;
&lt;li&gt;不能讓一個人擁有造成危機的權利&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Least Privilege Principle 最小權力原則
&lt;ul&gt;
&lt;li&gt;一個個體只能有達到目標的最小控制權&lt;/li&gt;
&lt;li&gt;常見違反狀況來自管理員的疏失 (administrator inattention)&lt;/li&gt;
&lt;li&gt;還有另一種常見狀況是權限蔓延 (privilege creep)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Defense in Depth Principle 縱深防禦原則
&lt;ul&gt;
&lt;li&gt;用分層方式防護&lt;/li&gt;
&lt;li&gt;從入口點開始防禦，接著集中防禦在bottleneck points&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security through Obscurity 模糊式防禦
&lt;ul&gt;
&lt;li&gt;早期基於保密來鞏固安全性&lt;/li&gt;
&lt;li&gt;已不再這麼有效，因為很多資訊變得容易取得&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;CH05 The Business of Security&lt;/h1&gt;
&lt;h2&gt;Business Continuity Planning (BCP)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Risk = Threat * Vulnerability (風險 = 威脅 * 漏洞)&lt;/li&gt;
&lt;li&gt;A quadrant map is a good tool for vulnerability assessment.
&lt;ul&gt;
&lt;li&gt;象限圖是用來做風險評估的好工具&lt;/li&gt;
&lt;li&gt;Example&lt;img src=&quot;image.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Implementing Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有四種方式
&lt;ul&gt;
&lt;li&gt;Risk Avoidance 避免&lt;/li&gt;
&lt;li&gt;Risk Mitigation 降低&lt;/li&gt;
&lt;li&gt;Risk Acceptance 接受&lt;/li&gt;
&lt;li&gt;Risk Transference 轉移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BCP 團隊要決定這些策略該如何應用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Maintaining the Plan&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BCP 是一份真實存在的文件&lt;/li&gt;
&lt;li&gt;環境、業務、現有技術的改變都會引發新的風險&lt;/li&gt;
&lt;li&gt;BCP 要能夠應對這些改變&lt;/li&gt;
&lt;li&gt;所以 BCP 要定期檢查和更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Disaster Recovery Planning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;遇到危機時，保障組織的運作&lt;/li&gt;
&lt;li&gt;是一份恢復計畫的文件&lt;/li&gt;
&lt;li&gt;目標
&lt;ul&gt;
&lt;li&gt;必要時用備用設施繼續運作&lt;/li&gt;
&lt;li&gt;使用備用設施提供額外操作&lt;/li&gt;
&lt;li&gt;要先做準備，當主要設備可以運作時，該如何轉移回去&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Selecting the Team&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;確保計畫有包括組織內的重要部門和任務&lt;/li&gt;
&lt;li&gt;團隊的規模取決於組織大小&lt;/li&gt;
&lt;li&gt;比較大的組織，計畫和實作的團隊可以分開來&lt;/li&gt;
&lt;li&gt;DRP 任務是次要的，團隊成員平常還是以原本的工作為主&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Building the Plan&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;計畫必須要詳細說明
&lt;ul&gt;
&lt;li&gt;每個人的職責&lt;/li&gt;
&lt;li&gt;所需要的資源 (包含金援、人力、硬體、軟體)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主要困難點為選擇備用設施
&lt;ul&gt;
&lt;li&gt;能力越好的越貴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Disaster Recover Facilities&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hot site
&lt;ul&gt;
&lt;li&gt;包含硬體、軟體、需要的資料&lt;/li&gt;
&lt;li&gt;要能立即接管&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Warm site
&lt;ul&gt;
&lt;li&gt;包含大多數的硬體、軟體，不會即時維護資料副本&lt;/li&gt;
&lt;li&gt;要能在幾小時或幾天內接管&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cold site
&lt;ul&gt;
&lt;li&gt;包含基本的電力、通訊、支援系統&lt;/li&gt;
&lt;li&gt;沒有硬體、軟體、資料。&lt;/li&gt;
&lt;li&gt;要能在幾周或幾個月內接管&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Creative Disaster Recovery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有些組織可能適合用非傳統DRP&lt;/li&gt;
&lt;li&gt;地理上分散的組織可能需要移動的設施
&lt;ul&gt;
&lt;li&gt;Ex: 拖車、移動房屋、航空運輸裝置&lt;/li&gt;
&lt;li&gt;不能將他們都放在同個地方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mutual assistance agreements
&lt;ul&gt;
&lt;li&gt;和其他組織分攤成本&lt;/li&gt;
&lt;li&gt;要小心維護機密資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Training&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Initial training
&lt;ul&gt;
&lt;li&gt;當人員進來之後就會做全面的培訓&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Refresher training
&lt;ul&gt;
&lt;li&gt;定期訓練，以更新團隊的技術和應變準備&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;訓練的時長、頻率、規模都要根據每個人的職責客製化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Checklist review
&lt;ul&gt;
&lt;li&gt;最簡單、最不費力的方式&lt;/li&gt;
&lt;li&gt;每個人都有一個checklist&lt;/li&gt;
&lt;li&gt;測試期間每個人都要去檢查自己的checklist&lt;/li&gt;
&lt;li&gt;可以團隊或單人完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tabletop exercise
&lt;ul&gt;
&lt;li&gt;測試員描述特定的災難情境&lt;/li&gt;
&lt;li&gt;DRP 成員口頭演練他們在該情境的回應&lt;/li&gt;
&lt;li&gt;情境可以在測試時或提前告知&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Soft test (Parallel test)
&lt;ul&gt;
&lt;li&gt;DRP 成員會被告知一個災難情境，然後需要啟動恢復設施來回應&lt;/li&gt;
&lt;li&gt;恢復設施和主要設施要同時運作，不用全部運作&lt;/li&gt;
&lt;li&gt;更全面的測試，同時也是更貴的測試&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hard test (Full-interruption test)
&lt;ul&gt;
&lt;li&gt;在很罕見的任務危急情況下使用，破壞性太強太貴&lt;/li&gt;
&lt;li&gt;涉及完全轉移到備用設施，再轉回主要設施&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Implementing The Plan&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;計畫需要定義第一時間向誰回報
&lt;ul&gt;
&lt;li&gt;當目睹了一個可能需要 Disaster recovery 的事件，所有員工都必須知道自己該做什麼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;宣布災難情況的授權必須要小心分配
&lt;ul&gt;
&lt;li&gt;可以不只一個人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Maintaining the Plan&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;團隊成員、程序、工具都要與時俱進&lt;/li&gt;
&lt;li&gt;團隊應該要嚴格按照 Checklist 以避免恐慌和混亂
&lt;ul&gt;
&lt;li&gt;Checklist 也要保持最新版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DRP 要利用學到的經驗彙報，持續測試和評估&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Data Classification&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;提供使用者分層敏感訊息的方式&lt;/li&gt;
&lt;li&gt;提供每個級別合適保障系統&lt;/li&gt;
&lt;li&gt;獲取機密資料的前提條件
&lt;ul&gt;
&lt;li&gt;Security clearance 安全許可&lt;/li&gt;
&lt;li&gt;Need to know 知情必要性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;政府和私人企業有相似的分類系統&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Security Clearances --&amp;gt;&lt;/h2&gt;
&lt;h1&gt;名詞解釋&lt;/h1&gt;
&lt;h2&gt;CH04&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;privilege creep 權力蔓延&lt;/li&gt;
&lt;li&gt;Obscurity 朦朧&lt;/li&gt;
&lt;li&gt;Mandatory 強制的&lt;/li&gt;
&lt;li&gt;Evaluations 評價&lt;/li&gt;
&lt;li&gt;Perimeter protection 周遭的防禦&lt;/li&gt;
&lt;li&gt;Electronic Emanations 電子放射&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CH05&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;quadrant map 象限圖&lt;/li&gt;
&lt;li&gt;assessment 評估&lt;/li&gt;
&lt;li&gt;quantitative 定量的&lt;/li&gt;
&lt;li&gt;qualitative 定性的&lt;/li&gt;
&lt;li&gt;mitigation 降低&lt;/li&gt;
&lt;li&gt;disperse 分散&lt;/li&gt;
&lt;li&gt;labor-intensive 勞力密集&lt;/li&gt;
&lt;li&gt;verbally 口頭地&lt;/li&gt;
&lt;li&gt;debriefings 彙報&lt;/li&gt;
&lt;li&gt;rigorous 嚴格的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CH06&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cryptology 密碼學&lt;/li&gt;
&lt;li&gt;Cryptography 加密&lt;/li&gt;
&lt;li&gt;Cryptanalysis 解密&lt;/li&gt;
&lt;li&gt;Crypto 以上全部(還有包含更多)&lt;/li&gt;
&lt;li&gt;symmetric 對稱&lt;/li&gt;
&lt;li&gt;Kerckhoffs Principle
&lt;ul&gt;
&lt;li&gt;攻擊者知道整個系統&lt;/li&gt;
&lt;li&gt;只有密鑰是秘密&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confidentiality 機密性&lt;/li&gt;
&lt;li&gt;Integrity 完整性&lt;/li&gt;
&lt;li&gt;digest 摘要&lt;/li&gt;
&lt;li&gt;asymmetric 非對稱&lt;/li&gt;
&lt;li&gt;Nonrepudiation 不可否認性&lt;/li&gt;
&lt;li&gt;obscurity 朦朧&lt;/li&gt;
&lt;li&gt;rigorously 嚴格地&lt;/li&gt;
&lt;li&gt;PGP, Pretty Good Privacy&lt;/li&gt;
&lt;li&gt;Implicit 隱性&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;老師上課用的簡報&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hackmd.io/@PenutChen/rJ85P4MCN&quot;&gt;1062 資安筆記 (By PenutChen) &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Arch Linux + Hyprland 安裝</title><link>https://yuyutw123.github.io/posts/archlinuxhyprland/installation/</link><guid isPermaLink="true">https://yuyutw123.github.io/posts/archlinuxhyprland/installation/</guid><description>一直重裝一直爽。</description><pubDate>Thu, 07 Nov 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;:::info
正確標題：Arch Linux + Hyprland with ML4W Dotfiles 安裝過程
:::&lt;/p&gt;
&lt;p&gt;不知道為什麼我用archinstall script都會報錯，所以改成自己手動裝，裝了好幾次才成功把要的東東弄好，所以記錄一下方便下一次重裝&lt;/p&gt;
&lt;p&gt;第1次：用archinstall script安裝，無視報錯，結果切換user的頁面會卡死 &amp;lt;br&amp;gt;
... &amp;lt;br&amp;gt;
第n次：沒裝iwd，查了很多資料還是連不到wifi &amp;lt;br&amp;gt;
第n+1次：不小心改到權限，2ㄏ2ㄏ &amp;lt;br&amp;gt;&lt;/p&gt;
&lt;h1&gt;下載iso &amp;amp; 製作開機碟&lt;/h1&gt;
&lt;p&gt;iso下載：
https://archlinux.org/download/&lt;/p&gt;
&lt;p&gt;利用Rufus製作開機碟：
https://rufus.ie/zh_TW/&lt;/p&gt;
&lt;h1&gt;安裝Arch Linux&lt;/h1&gt;
&lt;h2&gt;設定網路&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;iwctl

# 進入 [iwd] 之後
device list

station [device_name] scan
station [device_name] connect [Network_name]
exit # 連完退出[iwd]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;分割硬碟&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;lsblk #顯示目前硬碟的分割狀態

cfdisk /dev/nvme0n1 #用圖形化介面分割硬碟
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我的分區&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/dev/nvme0n1p1&lt;/code&gt;：EFI system&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/nvme0n1p2&lt;/code&gt;：swap&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/nvme0n1p3&lt;/code&gt;：root&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/nvme0n1p4&lt;/code&gt;：home&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方推薦分區
&lt;img src=&quot;https://hackmd.io/_uploads/BkeoamIWkl.png=200x&quot; alt=&quot;image&quot; /&gt;
我會再多分一個&lt;code&gt;/home&lt;/code&gt;
&lt;a href=&quot;https://wiki.archlinuxcn.org/zh-hant/%E5%88%86%E5%8C%BA#/home&quot;&gt;官方文件解釋&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;格式化分區&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# UFI system
mkfs.fat /dev/[partition_name]
mkfs.fat /dev/nvme0n1p1

# swap
mkswap /dev/[partition_name]
mkswap /dev/nvme0n1p2

# root和home
mkfs.ext4 /dev/[partition_name]
mkfs.ext4 /dev/nvme0n1p3
mkfs.ext4 /dev/nvme0n1p4

&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;掛載分區&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# root
mount /dev/nvme0n1p3 /mnt

# EFI
mkdir /mnt/efi
mount /dev/nvme0n1p1 /mnt/efi

# home
mkdir /mnt/home
mount /dev/nvme0n1p4 /mnt/home

# swap
swapon /dev/nvme0n1p2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;安裝系統&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/pacman.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新增鏡像
&lt;a href=&quot;https://archlinux.org/mirrorlist/?country=TW&amp;amp;protocol=http&amp;amp;protocol=https&amp;amp;ip_version=4&quot;&gt;隨便選一個Address&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[core]
Server = http://mirror.archlinux.tw/ArchLinux/$repo/os/$arch
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;安裝套件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;pacstrap /mnt base base-devel linux linux-firmware
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然後可以更新一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -Syu
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;配置系統&lt;/h2&gt;
&lt;h3&gt;Fstab&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;chroot到新系統&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;arch-chroot /mnt
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;設定時區&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ln -sf /usr/share/zoneinfo/Asia/Taipei  /etc/localtime
hwclock --systohc
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;設定語言&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;echo &quot;en_US.UTF-8 UTF-8&quot; &amp;gt; /etc/locale.gen;
echo &quot;zh_TW.UTF-8 UTF-8&quot; &amp;gt;&amp;gt; /etc/locale.gen;
echo &quot;LANG=en_US.UTF-8&quot; &amp;gt; /etc/locale.conf;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wenxuechaozhe/article/details/52564394&quot;&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 的差別&lt;/a&gt; (對，我不知道)&lt;/p&gt;
&lt;p&gt;接著執行 locale-gen 以生成 locale 資訊：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;locale-gen  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;設定電腦名稱&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;echo &quot;your-pc-name&quot; &amp;gt; /etc/hostname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安裝vim&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -Sy vim
vim /etc/hosts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然後寫入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1        localhost.localdomain         localhost
::1              localhost.localdomain         localhost
127.0.1.1        myhostname.localdomain        myhostname
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Initramfs&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;mkinitcpio -p linux
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;設定 Root 密碼&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;設定 Bootloader&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;pacman -Sy grub os-prober efibootmgr
os-prober

# for BIOS
grub-install /dev/sda

# for UEFI
grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=grub
grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;安裝網路工具&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;pacman -S net-tools dhclient dhcp
        wpa_supplicant wireless_tools 
        dhcpcd

pacman -S iwd # 連無線網路好用
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;常用 package&lt;/h3&gt;
&lt;p&gt;:::spoiler&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim # text editor 
pkgfile # 檢查官方軟件倉庫中軟體包文件的工具
bash-completion # 按tab會幫你打字的東東
sudo # substitute user do 你懂的
git # 讓你可以git別人的東東
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3&gt;pacman 筆記&lt;/h3&gt;
&lt;p&gt;:::spoiler&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 安裝
pacman -S [package_name]
pacman -S [package_name1] [package_name2] [package_name3]


# 同步
pacman -Sy
# 更新
pacman -Su
# 同步 + 更新全部 package
pacman -Syu

# 移除沒安裝的 cached package
pacman -Sc
# 移除所有在cache資料夾的檔案
pacman -Scc

# 移除 package
pacman -R [package_name]
# 把 dependencies 一起移除
pacman -Rs [package_name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::danger
如果只做 &lt;code&gt;pacman -Sy&lt;/code&gt;，可能會造成dependency issue
:::&lt;/p&gt;
&lt;h3&gt;重新啟動&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;systemctl enable dhcpcd.service
exit
umount -R /mnt
reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;好耶開機&lt;/h1&gt;
&lt;h2&gt;設定網路&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 啟動 iwd 服務
sudo systemctl start iwd

iwctl
# 後面就跟安裝的時候一樣步驟設定網路
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;設定新 user&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 新增使用者
sudo useradd -m -G wheel -s /bin/bash username
# 設定使用者密碼
sudo passwd username
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;新增權限&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;usermod -aG wheel username
visudo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;進去檔案編輯之後
把這行的註解刪掉&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# %wheel ALL=(ALL) ALL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;變成這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%wheel ALL=(ALL) ALL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;檢查權限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -lU ostechnix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::warning
如果碰到錯誤
&lt;code&gt;visudo: no editor found (editor path = /usr/bin/vi)&lt;/code&gt;
可以利用下面指令將預設editor從&lt;code&gt;vi&lt;/code&gt;改成&lt;code&gt;vim&lt;/code&gt;
(如果你有vim的話)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ln -s /usr/bin/vim /usr/bin/vi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或是安裝&lt;code&gt;vi&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -S vi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h1&gt;安裝 Hyprland&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;記得不要用root裝&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;安裝 git&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S git
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;安裝&lt;s&gt;帕魯&lt;/s&gt;paru&lt;/h2&gt;
&lt;p&gt;有兩種方法安裝&lt;/p&gt;
&lt;h3&gt;用AUR裝&lt;/h3&gt;
&lt;p&gt;:::spoiler&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo git clone https://aur.archlinux.org/paru.git
cd paru
makepkg -si
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::warning
如果makepkg時碰到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;==&amp;gt; Missing dependcies:
  -&amp;gt;cargo
==&amp;gt; ERROR: Could not resolve all dependcies.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安裝rustup&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S rustup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然後你可能又會碰到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;error: rustup could not choose a version of rustc to run, because one wasn&apos;t specified explicitly, and no default is configured.
help: run &apos;rustup default stable&apos; to download the latest stable release of Rust and set it as your default toolchain.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就按照他說的跑&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup default stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3&gt;用yay裝&lt;/h3&gt;
&lt;p&gt;:::spoiler&lt;/p&gt;
&lt;p&gt;我不是用這方法，但大概邏輯是這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo git clone https://aur.archlinux.org/yay-git.git
cd yay-git/
sudo chown -R username:username ~/yay-git
makepkg -si

# 裝好之後
yay -S paru
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;安裝 ml4w&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;paru -S ml4w-hyprland
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;讓他慢慢跑&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ml4w-hyprland-setup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;基本上介面淺顯易懂
選擇你要的設定就好了&lt;/p&gt;
&lt;h2&gt;好了&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://hackmd.io/_uploads/S1XyBHPWJl.jpg&quot; alt=&quot;20241105_150743&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;一些我碰到的問題&lt;/h1&gt;
&lt;h2&gt;WARNING: Possibly missing firmware for module: &apos;XXXXX&apos;&lt;/h2&gt;
&lt;p&gt;自己對照一下去下載對應的檔案
https://wiki.archlinux.org/title/Mkinitcpio#Possibly_missing_firmware_for_module_XXXX&lt;/p&gt;
&lt;h2&gt;Discord 不能打中文&lt;/h2&gt;
&lt;p&gt;如果你已經裝了fcitx5注音但還是不能打中文
可以試試看這個方法&lt;/p&gt;
&lt;h3&gt;找到啟動設定檔&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;find /usr/share/applications ~/.local/share/applications -name &quot;*discord*.desktop&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;編輯&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;vim /usr/share/applications/discord.desktop
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;在 &lt;code&gt;Exec=/usr/bin/discord&lt;/code&gt; 後面加上 &lt;code&gt;--enable-features=UseOzonePlatform --ozone-platform=wayland --enable-wayland-ime&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Exec=/usr/bin/discord --enable-features=UseOzonePlatform --ozone-platform=wayland --enable-wayland-ime
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;如果你用的是 X11 ，不是Wayland&lt;/h3&gt;
&lt;h3&gt;在 &lt;code&gt;Exec=/usr/bin/discord&lt;/code&gt; 後面加上 &lt;code&gt;--enable-features=UseOzonePlatform --ozone-platform=x11&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Exec=/usr/bin/discord --enable-features=UseOzonePlatform --ozone-platform=x11
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;設定連結開啟預設瀏覽器&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;xdg-settings set default-web-browser microsoft-edge.desktop
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;強制用 Xwayland 開啟程式&lt;/h2&gt;
&lt;p&gt;如果有些程式無法複製貼上的話可以試試看 &amp;lt;br&amp;gt;
Electron apps 很可能會遇到 &amp;lt;br&amp;gt;
我遇到過 Discord 和 VS code 無法貼上 Edge 複製過去的東西 &amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;https://www.reddit.com/r/hyprland/comments/1gmpxa2/i_cant_paste_text_from_microsoft_edge_to_vs_code/?utm_source=share&amp;amp;utm_medium=web3x&amp;amp;utm_name=web3xcss&amp;amp;utm_term=1&amp;amp;utm_content=share_button&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;大部分內容節錄自：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/title/Installation_guide_(%E6%AD%A3%E9%AB%94%E4%B8%AD%E6%96%87)&quot;&gt;Arch Linux官方文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hackmd.io/@PIFOPlfSS3W_CehLxS3hBQ/r1xrYth9V&quot;&gt;Arch linux 安裝 (By Eric Lin)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/6B4Kf30CWLg?si=0OZR_RfVwf5FbHJG&quot;&gt;ML4W Dotfiles 2.9.6 as AUR. Easy installation of HYPRLAND for Arch Linux, Garuda, Manjaro and more (By My Linux For Work)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Design Patterns 筆記</title><link>https://yuyutw123.github.io/posts/designpattern/</link><guid isPermaLink="true">https://yuyutw123.github.io/posts/designpattern/</guid><description>Design Patterns 的學習筆記。</description><pubDate>Tue, 14 May 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Creational Patterns&lt;/h1&gt;
&lt;h2&gt;Factory Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Creational Patterns&lt;/li&gt;
&lt;li&gt;provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created&lt;/li&gt;
&lt;li&gt;總而言之，就是提供一個可以父類別，讓使用者可以根據不同的需求去創造子類別，並實例化父類別的function，不一定每次調用都會創建新的實例&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;/img/DesignPatterns/Pasted_image_20240428164511.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;


class Button {
public:
	virtual void render() = 0;
	virtual void onClick(void (*f)()) = 0;

};

class WindowsButton: public Button {
public:
	void render() override {
		cout &amp;lt;&amp;lt; &quot;render Windows Button&quot; &amp;lt;&amp;lt; endl;
	}

	void onClick(void (*f)()) override {
		cout &amp;lt;&amp;lt; &quot;Windows Button clicked&quot; &amp;lt;&amp;lt; endl;
	}
};

class HTMLButton: public Button {
public:
	void render() override {
		cout &amp;lt;&amp;lt; &quot;render HTML Button&quot; &amp;lt;&amp;lt; endl;
	}

	void onClick(void (*f)()) override {
		cout &amp;lt;&amp;lt; &quot;Web Button clicked&quot; &amp;lt;&amp;lt; endl;
	}
};



class Dialog {
public:
	virtual Button* createButton() = 0;

	void render() {
		Button* okButton = createButton();

		okButton-&amp;gt;onClick(closeDialog);
		okButton-&amp;gt;render();
	}

	static void closeDialog() {
		cout &amp;lt;&amp;lt; &quot;Close Dialog&quot; &amp;lt;&amp;lt; endl;
	}
};

class WindowsDialog: public Dialog {

public:
	Button* createButton() override {
		return new WindowsButton();
	}

};


class WebDialog: public Dialog {

public:
	Button* createButton() override {
		return new HTMLButton();
	}

};


class Application {
public:

	Dialog* dialog;
	void init(string config) {
		if(config == &quot;Windows&quot;) {
			dialog = new WindowsDialog();
		} else if(config == &quot;Web&quot;){
			dialog = new WebDialog();
		} else {
			cout &amp;lt;&amp;lt; &quot;Unknown OS&quot; &amp;lt;&amp;lt; endl;
		}
	}

};


int main() {
	Application Client;
	Client.init(&quot;Web&quot;);
	Client.dialog-&amp;gt;render();

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Abstract Factory Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Creational Patterns&lt;/li&gt;
&lt;li&gt;lets you produce families of related objects without specifying their concrete classes&lt;/li&gt;
&lt;li&gt;總而言之，就是根據要求創建不同的工廠，而工廠生產的產品一樣，但是type不同，根據要求返回不同類型的多個產品&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;/img/DesignPatterns/Pasted_image_20240428164453.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;



class Button {
public:
	virtual void paint() = 0;
};

class WinButton:public Button {
public:
	void paint() override {
		cout &amp;lt;&amp;lt; &quot;Windows Button painted&quot; &amp;lt;&amp;lt; endl;
	}
};

class MacButton:public Button {
public:
	void paint() override {
		cout &amp;lt;&amp;lt; &quot;macOS Button painted&quot; &amp;lt;&amp;lt; endl;
	}
};

class Checkbox {
public:
	virtual void paint() = 0;
};

class WinCheckbox:public Checkbox {
public:
	void paint() override {
		cout &amp;lt;&amp;lt; &quot;Windows Checkbox painted&quot; &amp;lt;&amp;lt; endl;
	}
};

class MacCheckbox:public Checkbox {
public:
	void paint() override {
		cout &amp;lt;&amp;lt; &quot;macOS Checkbox painted&quot; &amp;lt;&amp;lt; endl;
	}
};

class GUIFactory {
public:
	virtual Button* createButton() = 0;
	virtual Checkbox* createCheckbox() = 0;
};

class WinFactory: public GUIFactory{
public:
	Button* createButton() override {
		return new WinButton();
	}
	Checkbox* createCheckbox() override{
		return new WinCheckbox();
	}

};

class MacFactory: public GUIFactory{
public:
	Button* createButton() override {
		return new MacButton();
	}
	Checkbox* createCheckbox() override{
		return new MacCheckbox();
	}

};



class Application {
	GUIFactory* factory;
	Button* button;
	Checkbox* checkbox;
public:
	Application(GUIFactory* factory): factory(factory) {
		this-&amp;gt;factory = factory;
	}
	void createUI() {
		button = factory-&amp;gt;createButton();
		checkbox = factory-&amp;gt;createCheckbox();
	}
	void paint() {
		button-&amp;gt;paint();
		checkbox-&amp;gt;paint();
	}
};

class ApplicationConfigurator {
public:
	void main(string config) {
		
		GUIFactory* factory;
		if(config == &quot;Windows&quot;) {
			factory = new WinFactory();
		} else if(config == &quot;Mac&quot;) {
			factory = new MacFactory();
		} else {
			cout &amp;lt;&amp;lt; &quot;Unknow OS&quot; &amp;lt;&amp;lt; endl;
		}

		Application app(factory);
		app.createUI();
		app.paint();
	}
};

int main() {
	ApplicationConfigurator Client;
	Client.main(&quot;Windows&quot;);
	Client.main(&quot;Mac&quot;);

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Builder Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Creational Patterns&lt;/li&gt;
&lt;li&gt;allows you to produce different types and representations of an object using the same construction code.&lt;/li&gt;
&lt;li&gt;總而言之，就是讓初始化的建構子不要太繁瑣，將對象構造的程式碼從產品類中抽離，並放在一個名為Builder的獨立對象中，Builder不允許其他對象訪問正在建造中的產品。&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;/img/DesignPatterns/Pasted_image_20240427024720.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;

class Car{
	int _seats;
	string _engine;
	bool _hasTripComputer;
	bool _hasGPS;

public:
	void setSeats(int seats) {
		_seats = seats;
        cout &amp;lt;&amp;lt; &quot;Setting seats to &quot; &amp;lt;&amp;lt; seats &amp;lt;&amp;lt; endl;
	}
	void setEngine(string engine) {
		_engine = engine;
		cout &amp;lt;&amp;lt; &quot;Installing &quot; &amp;lt;&amp;lt; engine &amp;lt;&amp;lt; &quot; engine&quot; &amp;lt;&amp;lt; endl;
	}
	void setTripComputer(bool tmp) {
		_hasTripComputer = tmp;
		if (tmp) {
            cout &amp;lt;&amp;lt; &quot;Installing trip computer&quot; &amp;lt;&amp;lt; endl;
        }
	}
	void setGPS(bool tmp) {
		_hasGPS = tmp;
		if (tmp) {
            cout &amp;lt;&amp;lt; &quot;Installing GPS&quot; &amp;lt;&amp;lt; endl;
        }
	}
	void display() {
		cout &amp;lt;&amp;lt; &quot;Car with &quot; &amp;lt;&amp;lt; _seats &amp;lt;&amp;lt; &quot; seats, engine: &quot; &amp;lt;&amp;lt; _engine;
		cout &amp;lt;&amp;lt; &quot;, Trip computer: &quot; &amp;lt;&amp;lt; (_hasTripComputer ? &quot;Yes&quot; : &quot;No&quot;);
		cout &amp;lt;&amp;lt; &quot;, GPS: &quot; &amp;lt;&amp;lt; (_hasGPS ? &quot;Yes&quot; : &quot;No&quot;) &amp;lt;&amp;lt; endl;
	}
};

class Manual{
	int _seats;
	string _engine;
	bool _hasTripComputer;
	bool _hasGPS;
public:
    void setSeats(int seats) {
		_seats = seats;
        cout &amp;lt;&amp;lt; &quot;Adding manual for seats: &quot; &amp;lt;&amp;lt; seats &amp;lt;&amp;lt; endl;
    }

    void setEngine(const std::string engine) {
		_engine = engine;
        cout &amp;lt;&amp;lt; &quot;Adding manual for &quot; &amp;lt;&amp;lt; engine &amp;lt;&amp;lt; &quot; engine&quot; &amp;lt;&amp;lt; endl;
    }

    void setTripComputer(bool tmp) {
		_hasTripComputer = tmp;
        if (tmp) {
            cout &amp;lt;&amp;lt; &quot;Adding manual for trip computer&quot; &amp;lt;&amp;lt; endl;
        }
    }

    void setGPS(bool tmp) {
		_hasGPS = tmp;
        if (tmp) {
            cout &amp;lt;&amp;lt; &quot;Adding manual for GPS&quot; &amp;lt;&amp;lt; endl;
        }
    }
    void display() {
		cout &amp;lt;&amp;lt; &quot;Car with &quot; &amp;lt;&amp;lt; _seats &amp;lt;&amp;lt; &quot; seats, engine: &quot; &amp;lt;&amp;lt; _engine;
		cout &amp;lt;&amp;lt; &quot;, Trip computer: &quot; &amp;lt;&amp;lt; (_hasTripComputer ? &quot;Yes&quot; : &quot;No&quot;);
		cout &amp;lt;&amp;lt; &quot;, GPS: &quot; &amp;lt;&amp;lt; (_hasGPS ? &quot;Yes&quot; : &quot;No&quot;) &amp;lt;&amp;lt; endl;
	}
};

class Builder {
public:
	virtual void reset() = 0;
	virtual void setSeats(int seats) = 0;
	virtual void setEngine(string engine) = 0;
	virtual void setTripComputer(bool tmp) = 0;
	virtual void setGPS(bool tmp) = 0;
};

class CarBuilder: public Builder {
	Car car;
public:
	CarBuilder() {
		reset();
	}
	void reset() override {
		car = Car();
	}
	void setSeats(int quantity) override {
		car.setSeats(quantity);
	}
	void setEngine(string engine) override {
		car.setEngine(engine);
	}
	void setTripComputer(bool tmp) override {
		car.setTripComputer(tmp);
	}
	void setGPS(bool tmp) override {
		car.setGPS(tmp);
	}

	Car getProduct() {
		return car;
	}
};

class CarManualBuilder: public Builder{
    Manual manual;
public:
    void reset() override {
        manual = Manual();
    }
    void setSeats(int seats) override {
        manual.setSeats(seats);
    }
    void setEngine(const string engineType) override {
        manual.setEngine(engineType);
    }
    void setTripComputer(bool included) override {
        manual.setTripComputer(included);
    }
    void setGPS(bool included) override {
        manual.setGPS(included);
    }
    Manual getProduct() {
        return manual;
    }
};

class Director {
public:
	void constrcuctSportsCar(Builder&amp;amp; builder) {
		builder.reset();
		builder.setSeats(2);
		builder.setEngine(&quot;SportEngine&quot;);
		builder.setTripComputer(true);
		builder.setGPS(true);
	}
	void constrcuctSUV(Builder&amp;amp; builder) {
		builder.reset();
		builder.setSeats(4);
		builder.setEngine(&quot;SUVEngine&quot;);
		builder.setTripComputer(true);
		builder.setGPS(true);
	}
};

class Application {
public:
	void makeCar() {
		Director director;

		CarBuilder builder;
		director.constrcuctSportsCar(builder);
		Car car = builder.getProduct();
		car.display();

		CarManualBuilder manualBuilder;
		director.constrcuctSportsCar(manualBuilder);
		Manual manual = manualBuilder.getProduct();
		manual.display();
	}
};

int main() {
	Application client;
	client.makeCar();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Prototype Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Creational Patterns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lets you copy existing objects without making your code dependent on their classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;簡單來說，就是做一個通用接口(Prototype)，讓使用者可以用該接口clone不同類型的對象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&quot;/img/DesignPatterns/Pasted_image_20240509231212.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Singleton Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Creational Patterns&lt;/li&gt;
&lt;li&gt;lets you ensure that a class has only one instance, while providing a global access point to this instance.&lt;/li&gt;
&lt;li&gt;保證一個class只有一個instance，並提供一個訪問該instance的global access&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;/img/DesignPatterns/Pasted_image_20240509231238.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Strcutional Patterns&lt;/h1&gt;
&lt;h2&gt;Adapter Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Structural Patterns&lt;/li&gt;
&lt;li&gt;allows objects with incompatible interfaces to collaborate.&lt;/li&gt;
&lt;li&gt;適配器，轉換資料，讓資料可以換一種格式以供客戶使用其他接口&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;/img/DesignPatterns/Pasted_image_20240510004608.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bridge Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Structural Patterns&lt;/li&gt;
&lt;li&gt;lets you split a large class or a set of closely related classes into two separate hierarchies—abstraction and implementation—which can be developed independently of each other.&lt;/li&gt;
&lt;li&gt;將繼承關係轉換為關聯關係，降低程式碼的複雜度，還有類與類之間的耦合；將抽象與實現解耦，使得兩者可以獨立變化&lt;/li&gt;
&lt;li&gt;淺顯易懂的影片 https://youtu.be/3Wkp4AEaubI?si=8o4P7IHKFQ9r1QcT&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Composite Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;就是樹，應該吧&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Decorator Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;寫一個新的class，對原有的class新增功能；相較於對原有的class新增子類，這個方法不用被限制於原有類，繼承是靜態的，無法在執行時更改已有對象的行為，只能由不同子類創建的對象來替代當前的整個對象；且子類只能有一個父類。&lt;/li&gt;
&lt;li&gt;所以 Decorator 比生成子類更加靈活。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Facade Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;提供用戶一個簡單明瞭的接口，不讓背後繁瑣的系統程序顯現在表面&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Flyweight Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;將重複的狀態儲存起來，降低系統的浪費&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Proxy Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;就，代理，可以控制客戶請求，並處理過濾，減少對原系統負荷&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Behavioral Design Patterns&lt;/h1&gt;
&lt;h2&gt;Chain of Responsibility Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;對請求處理，一個處理者沒處理完就給下一個，層層遞進，直到請求處理完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Command Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;將使用者操作轉換成命令，而不是操作直接對應處理程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Iterator Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;對collection創建一個迭代器，讓用戶可以獲取下一個元素、當前位置、重新開始迭代等；在不暴露底層結構的情況下遍歷元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mediator Method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;減少對象之間混亂的依賴關係，限制對象之間的直接交互，迫使對象們藉由一個中介者對象進行合作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Memento Method&lt;/h2&gt;
&lt;p&gt;在不破壞對象封裝情況的前提下創建對象狀態快照，可通過讓負責人維護原發器狀態歷史紀錄來簡化原發器代碼&lt;/p&gt;
&lt;h2&gt;Observer Method&lt;/h2&gt;
&lt;p&gt;定義一種一對多依賴關係，使得每當一個對象狀態發生改變時，其相關依賴對象皆得到通知並被自動更新&lt;/p&gt;
&lt;h2&gt;State Method&lt;/h2&gt;
&lt;p&gt;將原始對象指向每種狀態的class，且將所以與狀態相關的工作委託給狀態class&lt;/p&gt;
&lt;h2&gt;Strategy Method&lt;/h2&gt;
&lt;p&gt;將算法裝到一個名為策略的獨立class，並在需要策略算法時，通過接口將工作委派給策略的class去選擇並回傳演算法&lt;/p&gt;
</content:encoded></item><item><title>Browser Extension製作心得</title><link>https://yuyutw123.github.io/posts/twitterlogo/</link><guid isPermaLink="true">https://yuyutw123.github.io/posts/twitterlogo/</guid><description>幫你改掉醜醜的X Logo。</description><pubDate>Tue, 08 Aug 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;利用瀏覽器插件更改網頁樣貌&lt;/h1&gt;
&lt;h2&gt;動機&lt;/h2&gt;
&lt;p&gt;相信各位都有耳聞Elon Musk將「Twitter」改名「X」的新聞，身為推特的使用者，我真的覺得那個X的Logo有夠醜，所以我決定自己寫一個瀏覽器插件把Logo改回來。&lt;/p&gt;
&lt;h2&gt;想法&lt;/h2&gt;
&lt;p&gt;肉眼可見的Logo有3個地方會出現，第一個是分頁上面的Logo，其次是網頁左上角的Logo，最後一個是最不明顯，只會出現一下子的載入畫面正中間的Logo，那我就把這3個地方的Logo改回原本的小鳥就好了。
&amp;lt;!-- &lt;img src=&quot;/img/twitterLogo/where.png&quot; alt=&quot;&quot; /&gt; --&amp;gt;&lt;/p&gt;
&lt;h2&gt;撰寫程式&lt;/h2&gt;
&lt;p&gt;之前就有寫過瀏覽器插件把網站改成暗黑模式以保護眼睛，所以這次用同樣的思路，把網站裡面的元素改掉就好了，左上角和載入畫面的Logo用CSS直接改svg路徑，分頁上面的用JS改，由於推特不允許跨網站存取，所以我將推特Logo上傳到推特上直接讀取。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[role=heading]&amp;gt;a&amp;gt;div&amp;gt;svg&amp;gt;g&amp;gt;path{
    color: #1D9BF0;
    d: path(&quot;M23.643 4.937c-.835.37-1.732.62-2.675.733.962-.576 1.7-1.49 2.048-2.578-.9.534-1.897.922-2.958 1.13-.85-.904-2.06-1.47-3.4-1.47-2.572 0-4.658 2.086-4.658 4.66 0 .364.042.718.12 1.06-3.873-.195-7.304-2.05-9.602-4.868-.4.69-.63 1.49-.63 2.342 0 1.616.823 3.043 2.072 3.878-.764-.025-1.482-.234-2.11-.583v.06c0 2.257 1.605 4.14 3.737 4.568-.392.106-.803.162-1.227.162-.3 0-.593-.028-.877-.082.593 1.85 2.313 3.198 4.352 3.234-1.595 1.25-3.604 1.995-5.786 1.995-.376 0-.747-.022-1.112-.065 2.062 1.323 4.51 2.093 7.14 2.093 8.57 0 13.255-7.098 13.255-13.254 0-.2-.005-.402-.014-.602.91-.658 1.7-1.477 2.323-2.41z&quot;);
}
#react-root&amp;gt;div&amp;gt;div&amp;gt;div&amp;gt;svg&amp;gt;g&amp;gt;path{
    color: #1D9BF0;
    d: path(&quot;M23.643 4.937c-.835.37-1.732.62-2.675.733.962-.576 1.7-1.49 2.048-2.578-.9.534-1.897.922-2.958 1.13-.85-.904-2.06-1.47-3.4-1.47-2.572 0-4.658 2.086-4.658 4.66 0 .364.042.718.12 1.06-3.873-.195-7.304-2.05-9.602-4.868-.4.69-.63 1.49-.63 2.342 0 1.616.823 3.043 2.072 3.878-.764-.025-1.482-.234-2.11-.583v.06c0 2.257 1.605 4.14 3.737 4.568-.392.106-.803.162-1.227.162-.3 0-.593-.028-.877-.082.593 1.85 2.313 3.198 4.352 3.234-1.595 1.25-3.604 1.995-5.786 1.995-.376 0-.747-.022-1.112-.065 2.062 1.323 4.51 2.093 7.14 2.093 8.57 0 13.255-7.098 13.255-13.254 0-.2-.005-.402-.014-.602.91-.658 1.7-1.477 2.323-2.41z&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;document.querySelector(&apos;link[rel*=&quot;icon&quot;]&apos;).href = &quot;https://pbs.twimg.com/media/F12BhZ7aEAIc1bQ?format=png&amp;amp;name=small&quot;;
document.querySelector(&apos;link[rel*=&quot;shortcut icon&quot;]&apos;).href = &quot;https://pbs.twimg.com/media/F12BhZ7aEAIc1bQ?format=png&amp;amp;name=small&quot;;
document.querySelector(&apos;link[rel*=&quot;apple-touch-icon&quot;]&apos;).href = &quot;https://pbs.twimg.com/media/F12BhZ7aEAIc1bQ?format=png&amp;amp;name=small&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;更新&lt;/h2&gt;
&lt;p&gt;插件寫好後，我將自己的插件上傳到Github，並在匿名論壇發文分享，獲得了不錯的反響，然而隔天Twitter又更新了，他將分頁上的網站名稱也改成「X」了，網友留言問說能不能將分頁名稱也改回Twitter，所以我又打開Vscode更新了一下插件。&lt;/p&gt;
&lt;p&gt;因為網頁載入需要時間，不會馬上就載入title，所以我先等網頁載入約2秒後才更改網頁名稱，接著為避免切換不同頁面時title沒改到，所以我也偵測了body元素點擊時偵測title是否為「X」，是的話就改成Twitter。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sleep(time) {
    return (new Promise(function (resolve, reject) {
        setTimeout(function () { resolve(); }, time);
    }));
}
sleep(1000).then(function() {
    loading();
});
document.body.onclick = function (e) {
    loading();
};
async function loading() { 
    sleep(1000).then(function () {
        let titleDOM = document.querySelector(&apos;title&apos;).textContent;
        if (titleDOM[titleDOM.length - 1] != &apos;X&apos;)
            return;
        let prefix = &apos;&apos;;
        for (let i = 0; i &amp;lt; titleDOM.length-1; i++) {
            prefix += titleDOM[i];
        }
        prefix += &quot;Twitter&quot;;
        console.log(prefix);
        document.title = prefix;
    })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;成效&lt;/h2&gt;
&lt;p&gt;在完成插件後，我將自己的程式分享到Plurk上面，有Firefox的用戶問說能不能應用到Firefox上面，所以我去研究了一下該如何安裝到Firefox上面，發現意外地安裝第三方插件有點麻煩，所以我將自己的插件上架到FireFox的官方插件商店了，也順便上傳到Chrome Web Store(要5美金註冊費，盤)。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.plurk.com/p/pc0577&quot;&gt;Plurk文章連結&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;截至目前為止的使用者統計：
Chrome：848位
&amp;lt;!-- &lt;img src=&quot;/img/twitterLogo/Chrome.png&quot; alt=&quot;&quot; /&gt; --&amp;gt;
Firefox：86位
&amp;lt;!-- &lt;img src=&quot;/img/twitterLogo/Firefox.png&quot; alt=&quot;&quot; /&gt; --&amp;gt;&lt;/p&gt;
&lt;h2&gt;完整程式碼&lt;/h2&gt;
&lt;p&gt;Github Repo: https://github.com/YuYutw123/twitterLogo/&lt;/p&gt;
</content:encoded></item><item><title>電腦配單＋組裝心得</title><link>https://yuyutw123.github.io/posts/computer/</link><guid isPermaLink="true">https://yuyutw123.github.io/posts/computer/</guid><description>好欸新電腦。</description><pubDate>Mon, 07 Aug 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;自己組一台全新的桌機，從配單到組裝全部自己來，是我接觸電腦硬體之後最想做的事，但礙於經費問題，這個小小的目標一直放在我的心理無法實踐。&lt;/p&gt;
&lt;p&gt;今年暑假剛好想要去的工讀錄取了，算了一下薪水夠組一台自己期望程度的桌機，所以就開始配單了。&lt;/p&gt;
&lt;h1&gt;配備&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CPU: AMD R9 7900X &amp;lt;br&amp;gt;&lt;/li&gt;
&lt;li&gt;GPU: 技嘉 GeForce RTX 4070 WINDFORCE OC 12GB &amp;lt;br&amp;gt;&lt;/li&gt;
&lt;li&gt;MB: 微星 MPG B650 EDGE WIFI &amp;lt;br&amp;gt;&lt;/li&gt;
&lt;li&gt;RAM: 威剛 DDR5 5600 XPG Lancer 32GB(雙通道16GBx2) &amp;lt;br&amp;gt;&lt;/li&gt;
&lt;li&gt;SSD: PNY CS3040 2TB &amp;lt;br&amp;gt;&lt;/li&gt;
&lt;li&gt;Cooler: Montech Metal DT24 Premium &amp;lt;br&amp;gt;&lt;/li&gt;
&lt;li&gt;Case: Montech Air 1000 PREMIUM &amp;lt;br&amp;gt;&lt;/li&gt;
&lt;li&gt;PSU: CENTURY 850W &amp;lt;br&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;配單思路&lt;/h1&gt;
&lt;p&gt;首先是CPU，我選的是AMD的R9 7900X，對，現在已經沒有人在AMD YES了，Intel 12﹑13代的性能躍進，但我還是選了AMD，考慮到未來可能會想換新代的U來玩，所以選AMD平台。然後原本是打算在Amazon上面買，比台灣通路便宜，加上免運，又有國際保，沒理由不在Amazon買，一切看似如此完美，這個念頭就在原價屋特價到比Amazon便宜之後打消了。&amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;其實原本也有在考慮同價位的X3D系列U，但其實我也沒那麼多3A大作可以玩，所以還是選多工好一點點的7900X。&lt;/p&gt;
&lt;p&gt;（喔然後其實這些是冰棒和我說的，其實我原本會想買Intel，這次組單蠻多都是和冰棒討論之後做的選擇，他好電🛐）&lt;/p&gt;
&lt;p&gt;再來是主機板，微星的MPG B650 EDGE WIFI，冰棒推薦的，因為他說這個板子有好多USB槽真香，供電夠也有WIFI，然後我比較其他同價位和相同規格的主機板，最後也是選了這個。&lt;/p&gt;
&lt;p&gt;接著是記憶體，威剛 XPG Lancer DDR5 5600 32GB 雙通道，好看然後相對便宜，對，就這樣。
塔扇：Montech Metal DT24 Premium
也是同樣理由。&lt;/p&gt;
&lt;p&gt;機殼和電源，我是選Montech Air 1000 PREMIUM和CENTURY 850W，因為他們綁在一起買比較便宜，然後我有查了君主的電源評價，看起來還行，有查到事故但看起來是個人問題，然後保固是直接換新品，售後好像很不錯，所以就選了這個。&lt;/p&gt;
&lt;p&gt;硬碟延用原本就有的PNY CS3040 2TB。&lt;/p&gt;
&lt;p&gt;上面的零件除了硬碟之外都是在原價屋買的，原本想說給他們組就好了，但是要他們組要先付訂金，覺得很麻煩就想說自己組好了。&lt;/p&gt;
&lt;p&gt;原價屋買的零件到齊後，我就把電腦組起來了，咦？是不是哪裡怪怪的，說了這麼多，還沒提到一個很重要的零件呢？&lt;/p&gt;
&lt;p&gt;「顯示卡」&lt;/p&gt;
&lt;p&gt;沒錯，這個單子裡面沒出現顯卡，所以我組起來的時候，是延用舊的GTX 960 2GB，這段時間一直在等40系列顯卡價錢降價，奈何真的等不到，這個價錢維持好久了，俗話說早買早享受，某一天在滑PChome的時候發現有優惠卷折1500…好了啦，買了。&lt;/p&gt;
&lt;p&gt;顯卡我買的是丐板的技嘉RTX 4070 WINDFORCE OC 12G，原本在思考要3070還是4060，但是又看到4060的刀法很狠，所以預算捏了一下還是上了4070，雖然是三風扇，但是這張的體積比有些雙風扇的4070還小，所以就選了這張，看別人評測解熱能力也夠，所以選丐板就很夠了。&lt;/p&gt;
&lt;h1&gt;組裝心得&lt;/h1&gt;
&lt;p&gt;接者是組裝。&lt;/p&gt;
&lt;p&gt;我有過的組裝經驗只有我的舊桌機，那個也已經是2代intel平台了，所以組這麼新的平台還是第一次，但組電腦邏輯都大同小異，所以這次組裝也蠻順利的，除了那個CPU風扇我插超久。組裝完之後一次點亮，好耶。&lt;/p&gt;
&lt;p&gt;灌完系統之後我就開始用了，好用，好玩。&lt;/p&gt;
</content:encoded></item><item><title>鍵盤微改造紀錄</title><link>https://yuyutw123.github.io/posts/keyboard/</link><guid isPermaLink="true">https://yuyutw123.github.io/posts/keyboard/</guid><description>改造和清理鍵盤的紀錄</description><pubDate>Sun, 21 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;鍵盤&lt;/h1&gt;
&lt;p&gt;Ducky one 2 sf&lt;/p&gt;
&lt;h1&gt;使用材料&lt;/h1&gt;
&lt;p&gt;醫療用紙膠帶、包材用的泡棉&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;最近很喜歡看自組鍵盤的影片，但我最近很窮沒錢再買鍵盤，所以想說利用手邊有的材料來小小升級自己的鍵盤。找了找自己手邊有的材料，只有找到醫療用紙膠帶和我媽買東西拿到的泡棉，沒有潤滑劑難過。&lt;/p&gt;
&lt;h1&gt;過程&lt;/h1&gt;
&lt;p&gt;拆鍵盤第一步：拔鍵帽，廢話。
拔完鍵帽後，我開始拆鍵盤上蓋，我不知道其他鍵盤是不是也是這樣，但這把鍵盤的上蓋真的有夠難拆的，自己試了20幾分鐘後還是拆不開了，後來找教學一下就拆開了:P (拆上蓋的教學：https://youtu.be/5gMt81wF0C8)
拆開上蓋後，把PCB上面的螺絲卸下，就可以取出PCB板了，我只打算做foam + tape mod，所以把PCB貼上紙膠帶，下面墊泡棉後我就把螺絲鎖回去了，接著把上蓋蓋回去，鍵帽裝回去。
搭啷，小改造完成。&lt;/p&gt;
&lt;h1&gt;心得&lt;/h1&gt;
&lt;p&gt;原本想說我的木耳應該聽不太出差別，而且我也沒潤軸，結果差別還是蠻明顯的。
首先手感就不太一樣了，可以很明顯地感受到下面有東西，而不是直接到底部的塑膠蓋。然後泡綿也很好地吸收了原本鍵盤的回音，聽起來真的有一點點不一樣。&lt;/p&gt;
&lt;p&gt;總結，小改造鍵盤蠻有趣的，也真的有體驗上的不同，也許之後也會嘗試看看自組鍵盤，但前提是我要有錢D:&lt;/p&gt;
</content:encoded></item><item><title>YouTube CC字幕輸出工具</title><link>https://yuyutw123.github.io/posts/ytcc/</link><guid isPermaLink="true">https://yuyutw123.github.io/posts/ytcc/</guid><description>輸出YT CC字幕的東東。</description><pubDate>Sun, 17 Apr 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;YouTube CC字幕輸出工具&lt;/h1&gt;
&lt;h2&gt;動機&lt;/h2&gt;
&lt;p&gt;我自己本身有在經營翻譯影片的頻道，大多翻譯英文影片，多次翻譯下來，我發現YouTube上有許多原文為英文的影片會自動產生英文字幕，準確率頗高，如果能善加利用，便會提高翻譯的效率。&lt;/p&gt;
&lt;p&gt;我的翻譯頻道↓&lt;a href=&quot;https://www.youtube.com/c/%E7%83%A4%E8%82%89%E4%BB%94&quot;&gt;頻道連結&lt;/a&gt;
&lt;img src=&quot;https://i.imgur.com/uYeMNsR.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;程式構思&lt;/h2&gt;
&lt;p&gt;最一開始我想寫出一個程式，能透過api抓取youtube自動生成的字幕，標記時間戳後，輸出成txt文字檔。
很快地，大約花了兩個小時我就完成以上功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/tNu2UPA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;改良程式&lt;/h2&gt;
&lt;p&gt;看著程式成功執行，我卻覺得還不夠，簡陋的執行畫面、不精確的時間標記，這不是我想完成的程式。
我還有許多能做的，可以為他加上GUI、可以將他輸出能srt字幕檔，讓人便於操作，能直接透過字幕檔案翻譯。
決定好該做的東西後，我便開始排版規劃程式的外觀，我透過Photoshop設計了GUI的外觀。
&lt;img src=&quot;https://i.imgur.com/CHwFefC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;再來是主程式的編寫，我使用tkinter這個模組來建立圖形化介面，加上各個物件，並撰寫各個功能。
完成後，程式的最終樣貌如下。
&lt;img src=&quot;https://i.imgur.com/HEStwoJ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;程式測試&lt;/h2&gt;
&lt;p&gt;完成程式後，接著就是測試環節，我用了自己的電腦進行測試，程式能夠順利執行，接著請了幾位朋友測試，也都能正常執行。
測試影片連結: https://youtu.be/tC0tWLqr-LQ&lt;/p&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;其實在寫這個程式之前，我對python這個語言的語法不是很熟悉，所以找了入門教學來看，依靠過去學其他語言的經驗，我大概花了2個小時就熟悉了python，過去寫python程式都是照樣造句，看完教學後我才了解了每行程式碼背後的意義，並自行寫出自己的程式。&lt;/p&gt;
&lt;p&gt;編寫程式時，困擾我最久的是轉換srt字幕檔案的功能，利用api抓下來的資料型態是一個list of dict，所得到的資料是每段話「開始的時間」和「持續的時間」且單位為秒，我需要自行計算每段話何時結束，我得讓結束時間小於等於下一段話的開始時間。
由於輸出字幕的方式是用for迴圈讓他一個dict一個dict跑，所以我無法取得下一個dict的資料，再查了許多資料後才終於解決這個問題。&lt;/p&gt;
&lt;p&gt;這個程式算是我目前寫過最完整的程式，有圖形化介面、實質用途，真的對自己有幫助的程式。
這次的經驗也讓我知道註解的重要性，因為整個程式大約花了兩個星期才做完，每次重新開啟檔案，先前的思緒都會消失，需要再重新閱讀去理解自己之前寫的東西，這時註解就顯得十分重要，能讓自己更快回到狀態。&lt;/p&gt;
&lt;p&gt;我很開心自己接觸了許多不同的事物，其實我對影像設計這塊也十分感興趣，這也是為何我自己設計了程式的GUI，我想要擁有自己獨立開發一款程式的能力，而這些都是要達成此目標不可缺少的能力，希望大學四年後，各個能力都可以更上一層樓。&lt;/p&gt;
&lt;h2&gt;完整程式碼&lt;/h2&gt;
&lt;p&gt;GitHub Repo: https://github.com/YuYuTW123/YTCC/&lt;/p&gt;
</content:encoded></item></channel></rss>